# ============================================================
# CHANGELOG AVEC LES VRAIS STATUS DE COMMANDES
# FILE: src/main/resources/db/changelog/db.changelog-master.yml
# ============================================================

databaseChangeLog:
  - changeSet:
      id: 001-create-employee-table
      author: pokemon-card-planning
      comment: Create j_employee table
      changes:
        - sql:
            sql: |
              CREATE TABLE IF NOT EXISTS j_employee (
                id BINARY(16) NOT NULL PRIMARY KEY,
                first_name VARCHAR(100) NOT NULL,
                last_name VARCHAR(100) NOT NULL,
                email VARCHAR(255) NOT NULL UNIQUE,
                work_hours_per_day INT NOT NULL DEFAULT 8,
                active BOOLEAN DEFAULT TRUE,
                efficiency_rating DECIMAL(3,2) DEFAULT 1.00,
                creation_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
                modification_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
              
                INDEX idx_employee_active (active),
                INDEX idx_employee_email (email),
                INDEX idx_employee_name (last_name, first_name)
              ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

  - changeSet:
      id: 002-create-planning-table-real-status
      author: pokemon-card-planning
      comment: Create j_planning table with REAL order status values
      changes:
        - sql:
            sql: |
              CREATE TABLE IF NOT EXISTS j_planning (
                id BINARY(16) NOT NULL PRIMARY KEY,
                order_id BINARY(16) NOT NULL,
                employee_id BINARY(16) NOT NULL,
                planning_date DATE NOT NULL,
                start_time DATETIME NOT NULL,
                end_time DATETIME,
                estimated_duration_minutes INT NOT NULL DEFAULT 0,
              
                -- ✅ delai: X, F+, F, C, E
                delai VARCHAR(10) NOT NULL DEFAULT 'C',
              
                -- ✅ status: REAL order status (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 41, 42)
                -- Default: 2 (A_NOTER) for initial planning
                status INT NOT NULL DEFAULT 2,
              
                completed BOOLEAN DEFAULT FALSE,
                estimated_card_count INT DEFAULT 25,
                actual_card_count INT DEFAULT NULL,
                card_count INT DEFAULT 0,
                notes TEXT,
                progress_percentage INT DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
              
                FOREIGN KEY (employee_id) REFERENCES j_employee(id) ON DELETE CASCADE,
              
                INDEX idx_planning_date (planning_date),
                INDEX idx_planning_employee (employee_id),
                INDEX idx_planning_order (order_id),
                INDEX idx_planning_status (status),
                INDEX idx_planning_delai (delai),
                INDEX idx_planning_start_time (start_time),
                INDEX idx_planning_order_employee (order_id, employee_id),
                INDEX idx_planning_date_status (planning_date, status),
                INDEX idx_planning_employee_date (employee_id, planning_date),
                INDEX idx_planning_employee_time (employee_id, planning_date, start_time),
              
                CONSTRAINT chk_delai_values CHECK (delai IN ('X', 'F+', 'F', 'C', 'E')),
                CONSTRAINT chk_status_values CHECK (status IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 41, 42)),
                CONSTRAINT chk_progress_range CHECK (progress_percentage >= 0 AND progress_percentage <= 100)
              ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

  - changeSet:
      id: 003-create-order-status-mapping
      author: pokemon-card-planning
      comment: Create mapping table for REAL order status values
      changes:
        - createTable:
            tableName: j_order_status_mapping
            columns:
              - column:
                  name: status_value
                  type: INT
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: status_code
                  type: VARCHAR(30)
                  constraints:
                    nullable: false
              - column:
                  name: status_name_en
                  type: VARCHAR(50)
                  constraints:
                    nullable: false
              - column:
                  name: status_name_fr
                  type: VARCHAR(50)
                  constraints:
                    nullable: false
              - column:
                  name: status_description
                  type: VARCHAR(200)
              - column:
                  name: is_planning_stage
                  type: BOOLEAN
                  defaultValueBoolean: false
                  constraints:
                    nullable: false
              - column:
                  name: display_order
                  type: INT
                  constraints:
                    nullable: false
        
        # Insert REAL order status mappings
        - insert:
            tableName: j_order_status_mapping
            columns:
              - column: {name: status_value, valueNumeric: 1}
              - column: {name: status_code, value: 'A_RECEPTIONNER'}
              - column: {name: status_name_en, value: 'To be received'}
              - column: {name: status_name_fr, value: 'À réceptionner'}
              - column: {name: status_description, value: 'Order package waiting to be received'}
              - column: {name: is_planning_stage, valueBoolean: false}
              - column: {name: display_order, valueNumeric: 1}

        - insert:
            tableName: j_order_status_mapping
            columns:
              - column: {name: status_value, valueNumeric: 9}
              - column: {name: status_code, value: 'COLIS_ACCEPTE'}
              - column: {name: status_name_en, value: 'Package accepted'}
              - column: {name: status_name_fr, value: 'Colis accepté'}
              - column: {name: status_description, value: 'Package has been accepted'}
              - column: {name: is_planning_stage, valueBoolean: false}
              - column: {name: display_order, valueNumeric: 2}

        - insert:
            tableName: j_order_status_mapping
            columns:
              - column: {name: status_value, valueNumeric: 10}
              - column: {name: status_code, value: 'A_SCANNER'}
              - column: {name: status_name_en, value: 'To be scanned'}
              - column: {name: status_name_fr, value: 'À scanner'}
              - column: {name: status_description, value: 'Cards need to be scanned'}
              - column: {name: is_planning_stage, valueBoolean: true}
              - column: {name: display_order, valueNumeric: 3}

        - insert:
            tableName: j_order_status_mapping
            columns:
              - column: {name: status_value, valueNumeric: 11}
              - column: {name: status_code, value: 'A_OUVRIR'}
              - column: {name: status_name_en, value: 'To be opened'}
              - column: {name: status_name_fr, value: 'À ouvrir'}
              - column: {name: status_description, value: 'Package needs to be opened'}
              - column: {name: is_planning_stage, valueBoolean: true}
              - column: {name: display_order, valueNumeric: 4}

        - insert:
            tableName: j_order_status_mapping
            columns:
              - column: {name: status_value, valueNumeric: 2}
              - column: {name: status_code, value: 'A_NOTER'}
              - column: {name: status_name_en, value: 'To be graded'}
              - column: {name: status_name_fr, value: 'À noter'}
              - column: {name: status_description, value: 'Cards need to be graded (evaluation)'}
              - column: {name: is_planning_stage, valueBoolean: true}
              - column: {name: display_order, valueNumeric: 5}

        - insert:
            tableName: j_order_status_mapping
            columns:
              - column: {name: status_value, valueNumeric: 3}
              - column: {name: status_code, value: 'A_CERTIFIER'}
              - column: {name: status_name_en, value: 'To be encapsulated'}
              - column: {name: status_name_fr, value: 'À certifier'}
              - column: {name: status_description, value: 'Cards need to be encapsulated (certification)'}
              - column: {name: is_planning_stage, valueBoolean: true}
              - column: {name: display_order, valueNumeric: 6}

        - insert:
            tableName: j_order_status_mapping
            columns:
              - column: {name: status_value, valueNumeric: 4}
              - column: {name: status_code, value: 'A_PREPARER'}
              - column: {name: status_name_en, value: 'To be prepared'}
              - column: {name: status_name_fr, value: 'À préparer'}
              - column: {name: status_description, value: 'Order needs to be prepared for shipping'}
              - column: {name: is_planning_stage, valueBoolean: true}
              - column: {name: display_order, valueNumeric: 7}

        - insert:
            tableName: j_order_status_mapping
            columns:
              - column: {name: status_value, valueNumeric: 7}
              - column: {name: status_code, value: 'A_DESCELLER'}
              - column: {name: status_name_en, value: 'To be unsealed'}
              - column: {name: status_name_fr, value: 'À desceller'}
              - column: {name: status_description, value: 'Cards need to be unsealed'}
              - column: {name: is_planning_stage, valueBoolean: true}
              - column: {name: display_order, valueNumeric: 8}

        - insert:
            tableName: j_order_status_mapping
            columns:
              - column: {name: status_value, valueNumeric: 6}
              - column: {name: status_code, value: 'A_VOIR'}
              - column: {name: status_name_en, value: 'To be checked'}
              - column: {name: status_name_fr, value: 'À voir'}
              - column: {name: status_description, value: 'Order needs to be reviewed/checked'}
              - column: {name: is_planning_stage, valueBoolean: true}
              - column: {name: display_order, valueNumeric: 9}

        - insert:
            tableName: j_order_status_mapping
            columns:
              - column: {name: status_value, valueNumeric: 41}
              - column: {name: status_code, value: 'A_DISTRIBUER'}
              - column: {name: status_name_en, value: 'To be delivered'}
              - column: {name: status_name_fr, value: 'À distribuer'}
              - column: {name: status_description, value: 'Order ready to be delivered'}
              - column: {name: is_planning_stage, valueBoolean: false}
              - column: {name: display_order, valueNumeric: 10}

        - insert:
            tableName: j_order_status_mapping
            columns:
              - column: {name: status_value, valueNumeric: 42}
              - column: {name: status_code, value: 'A_ENVOYER'}
              - column: {name: status_name_en, value: 'To be sent'}
              - column: {name: status_name_fr, value: 'À envoyer'}
              - column: {name: status_description, value: 'Order ready to be sent'}
              - column: {name: is_planning_stage, valueBoolean: false}
              - column: {name: display_order, valueNumeric: 11}

        - insert:
            tableName: j_order_status_mapping
            columns:
              - column: {name: status_value, valueNumeric: 5}
              - column: {name: status_code, value: 'ENVOYEE'}
              - column: {name: status_name_en, value: 'Sent'}
              - column: {name: status_name_fr, value: 'Envoyée'}
              - column: {name: status_description, value: 'Order has been sent'}
              - column: {name: is_planning_stage, valueBoolean: false}
              - column: {name: display_order, valueNumeric: 12}

        - insert:
            tableName: j_order_status_mapping
            columns:
              - column: {name: status_value, valueNumeric: 8}
              - column: {name: status_code, value: 'RECU'}
              - column: {name: status_name_en, value: 'Received'}
              - column: {name: status_name_fr, value: 'Reçu'}
              - column: {name: status_description, value: 'Order has been received by customer'}
              - column: {name: is_planning_stage, valueBoolean: false}
              - column: {name: display_order, valueNumeric: 13}

  - changeSet:
      id: 004-create-delai-mapping-table
      author: pokemon-card-planning
      comment: Create delai priority mapping table
      changes:
        - createTable:
            tableName: j_delai_priority_mapping
            columns:
              - column:
                  name: delai_code
                  type: VARCHAR(10)
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: priority_name
                  type: VARCHAR(50)
                  constraints:
                    nullable: false
              - column:
                  name: priority_level
                  type: INT
                  constraints:
                    nullable: false
              - column:
                  name: description
                  type: VARCHAR(200)

        - insert:
            tableName: j_delai_priority_mapping
            columns:
              - column: {name: delai_code, value: 'X'}
              - column: {name: priority_name, value: 'EXCELSIOR'}
              - column: {name: priority_level, valueNumeric: 1}
              - column: {name: description, value: 'Highest priority - Excelsior service'}

        - insert:
            tableName: j_delai_priority_mapping
            columns:
              - column: {name: delai_code, value: 'F+'}
              - column: {name: priority_name, value: 'FAST_PLUS'}
              - column: {name: priority_level, valueNumeric: 2}
              - column: {name: description, value: 'High priority - Fast Plus service'}

        - insert:
            tableName: j_delai_priority_mapping
            columns:
              - column: {name: delai_code, value: 'F'}
              - column: {name: priority_name, value: 'FAST'}
              - column: {name: priority_level, valueNumeric: 3}
              - column: {name: description, value: 'Medium priority - Fast service'}

        - insert:
            tableName: j_delai_priority_mapping
            columns:
              - column: {name: delai_code, value: 'C'}
              - column: {name: priority_name, value: 'CLASSIC'}
              - column: {name: priority_level, valueNumeric: 4}
              - column: {name: description, value: 'Normal priority - Classic service'}

        - insert:
            tableName: j_delai_priority_mapping
            columns:
              - column: {name: delai_code, value: 'E'}
              - column: {name: priority_name, value: 'ECONOMY'}
              - column: {name: priority_level, valueNumeric: 5}
              - column: {name: description, value: 'Low priority - Economy service'}

  - changeSet:
      id: 005-create-group-tables
      author: pokemon-card-planning
      comment: Create Group tables
      changes:
        - sql:
            sql: |
              CREATE TABLE IF NOT EXISTS j_group (
                id BINARY(16) NOT NULL PRIMARY KEY,
                name VARCHAR(50) NOT NULL UNIQUE,
                name_upper VARCHAR(50) NULL,
                description VARCHAR(255) NULL,
                active BOOLEAN NOT NULL DEFAULT TRUE,
                permission_level INT NOT NULL DEFAULT 1,
                creation_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                modification_date DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
              
                INDEX idx_group_name (name),
                INDEX idx_group_name_upper (name_upper),
                INDEX idx_group_active (active),
                INDEX idx_group_permission_level (permission_level),
              
                CONSTRAINT chk_permission_level CHECK (permission_level >= 1 AND permission_level <= 10),
                CONSTRAINT chk_group_name_not_empty CHECK (TRIM(name) != '')
              ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

        - sql:
            sql: |
              CREATE TABLE IF NOT EXISTS j_employee_group (
                employee_id BINARY(16) NOT NULL,
                group_id BINARY(16) NOT NULL,
              
                PRIMARY KEY (employee_id, group_id),
              
                INDEX idx_employee_group_employee (employee_id),
                INDEX idx_employee_group_group (group_id),
              
                CONSTRAINT fk_employee_group_employee 
                  FOREIGN KEY (employee_id) REFERENCES j_employee(id) ON DELETE CASCADE,
                CONSTRAINT fk_employee_group_group 
                  FOREIGN KEY (group_id) REFERENCES j_group(id) ON DELETE CASCADE
              ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

  - changeSet:
      id: 006-setup-group-triggers
      author: pokemon-card-planning
      comment: Setup triggers for groups
      changes:
        - sql:
            sql: |
              CREATE TRIGGER tr_group_insert_name_upper
              BEFORE INSERT ON j_group
              FOR EACH ROW
              SET NEW.name_upper = UPPER(NEW.name);

        - sql:
            sql: |
              CREATE TRIGGER tr_group_update_name_upper
              BEFORE UPDATE ON j_group
              FOR EACH ROW
              BEGIN
                SET NEW.name_upper = UPPER(NEW.name);
                SET NEW.modification_date = CURRENT_TIMESTAMP;
              END;

  - changeSet:
      id: 007-insert-default-groups
      author: pokemon-card-planning
      comment: Insert default groups for Pokemon card processing
      changes:
        - sql:
            sql: |
              INSERT INTO j_group (id, name, description, permission_level, active)
              VALUES 
                (UNHEX(REPLACE(UUID(), '-', '')), 'ROLE_ADMIN', 'System administrators', 10, true),
                (UNHEX(REPLACE(UUID(), '-', '')), 'ROLE_MANAGER', 'Team managers', 7, true),
                (UNHEX(REPLACE(UUID(), '-', '')), 'ROLE_NOTEUR', 'Card graders', 5, true),
                (UNHEX(REPLACE(UUID(), '-', '')), 'ROLE_CERTIFICATEUR', 'Card certifiers/encapsulators', 5, true),
                (UNHEX(REPLACE(UUID(), '-', '')), 'ROLE_SCANNER', 'Card scanners', 4, true),
                (UNHEX(REPLACE(UUID(), '-', '')), 'ROLE_PREPARATEUR', 'Order preparers', 4, true),
                (UNHEX(REPLACE(UUID(), '-', '')), 'ROLE_VIEWER', 'Read-only viewers', 2, true);

  - changeSet:
      id: 008-insert-test-employees
      author: pokemon-card-planning
      comment: Add test employees
      changes:
        - sql:
            sql: |
              INSERT INTO j_employee 
              (id, first_name, last_name, email, work_hours_per_day, active, efficiency_rating)
              VALUES
              (UNHEX(REPLACE(UUID(), '-', '')), 'Jean', 'Martin', 'jean.martin@pokemon.com', 8, 1, 1.00),
              (UNHEX(REPLACE(UUID(), '-', '')), 'Marie', 'Dubois', 'marie.dubois@pokemon.com', 8, 1, 1.10),
              (UNHEX(REPLACE(UUID(), '-', '')), 'Pierre', 'Durand', 'pierre.durand@pokemon.com', 7, 1, 0.95),
              (UNHEX(REPLACE(UUID(), '-', '')), 'Sophie', 'Moreau', 'sophie.moreau@pokemon.com', 8, 1, 1.05),
              (UNHEX(REPLACE(UUID(), '-', '')), 'Lucas', 'Bernard', 'lucas.bernard@pokemon.com', 6, 1, 1.15);

  - changeSet:
      id: 009-create-planning-views
      author: pokemon-card-planning
      comment: Create helper views
      changes:
        - sql:
            sql: |
              CREATE OR REPLACE VIEW v_employee_workload AS
              SELECT 
                e.id as employee_id,
                CONCAT(e.first_name, ' ', e.last_name) as employee_name,
                e.work_hours_per_day,
                e.efficiency_rating,
                e.active,
                COALESCE(SUM(CASE WHEN p.planning_date = CURDATE() AND p.status IN (2, 3, 4, 6, 7, 10, 11) THEN p.estimated_duration_minutes ELSE 0 END), 0) as today_minutes,
                COALESCE(SUM(CASE WHEN p.planning_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY) AND p.status IN (2, 3, 4, 6, 7, 10, 11) THEN p.estimated_duration_minutes ELSE 0 END), 0) as week_minutes,
                COUNT(CASE WHEN p.planning_date = CURDATE() AND p.status IN (2, 3, 4, 6, 7, 10, 11) THEN 1 END) as today_orders,
                COUNT(CASE WHEN p.planning_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY) AND p.status IN (2, 3, 4, 6, 7, 10, 11) THEN 1 END) as week_orders
              FROM j_employee e
              LEFT JOIN j_planning p ON e.id = p.employee_id
              WHERE e.active = 1
              GROUP BY e.id, e.first_name, e.last_name, e.work_hours_per_day, e.efficiency_rating, e.active;

        - sql:
            sql: |
              CREATE OR REPLACE VIEW v_order_planning_summary AS
              SELECT 
                o.id as order_id,
                o.num_commande as order_number,
                o.num_commande_client as client_order_number,
                o.date as order_date,
                o.status as order_status,
                osm.status_name_en as order_status_name,
                o.delai as order_delai,
                COALESCE(
                  (SELECT COUNT(*) FROM card_certification_order cco WHERE cco.order_id = o.id),
                  0
                ) as card_count,
                COALESCE(p.id, NULL) as planning_id,
                COALESCE(p.planning_date, NULL) as scheduled_date,
                COALESCE(p.employee_id, NULL) as assigned_employee_id,
                COALESCE(CONCAT(e.first_name, ' ', e.last_name), NULL) as assigned_employee_name,
                COALESCE(p.status, 0) as planning_status,
                COALESCE(psm.status_name_en, 'UNSCHEDULED') as planning_status_name,
                COALESCE(p.delai, o.delai, 'C') as planning_delai
              FROM `order` o
              LEFT JOIN j_planning p ON o.id = p.order_id
                              LEFT JOIN j_employee e ON p.employee_id = e.id
              LEFT JOIN j_order_status_mapping osm ON o.status = osm.status_value
              LEFT JOIN j_order_status_mapping psm ON p.status = psm.status_value
              WHERE o.annulee = 0 AND o.paused = 0;