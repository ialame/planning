# ===============================================
# KUBERNETES DEPLOYMENT TEMPLATE
# Pokemon Card Planning System
# ===============================================
#
# INSTRUCTIONS:
# 1. Copy this file to: kubernetes-deployment.yaml (or pokemon-planning-deployment.yaml)
# 2. Replace all PLACEHOLDER values with your actual credentials
# 3. The actual deployment file is ignored by Git for security
#
# PLACEHOLDERS TO REPLACE:
# - YOUR_SECURE_ROOT_PASSWORD
# - YOUR_DATABASE_USERNAME
# - YOUR_DATABASE_PASSWORD
# - YOUR_DOCKERHUB_USERNAME
#

---
apiVersion: v1
kind: Namespace
metadata:
  name: pokemon-planning
  labels:
    app: pokemon-planning

---
apiVersion: v1
kind: Secret
metadata:
  name: database-secret
  namespace: pokemon-planning
type: Opaque
stringData:
  root-password: YOUR_SECURE_ROOT_PASSWORD
  username: YOUR_DATABASE_USERNAME
  password: YOUR_DATABASE_PASSWORD

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: database
  namespace: pokemon-planning
  labels:
    app: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
    spec:
      containers:
        - name: mariadb
          image: mariadb:10.11
          ports:
            - containerPort: 3306
          env:
            - name: MARIADB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-secret
                  key: root-password
            - name: MARIADB_DATABASE
              value: "dev"
            - name: MARIADB_USER
              valueFrom:
                secretKeyRef:
                  name: database-secret
                  key: username
            - name: MARIADB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-secret
                  key: password
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          readinessProbe:
            exec:
              command:
                - mysqladmin
                - ping
                - -h
                - localhost
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            exec:
              command:
                - mysqladmin
                - ping
                - -h
                - localhost
            initialDelaySeconds: 30
            periodSeconds: 10

---
apiVersion: v1
kind: Service
metadata:
  name: database-service
  namespace: pokemon-planning
spec:
  selector:
    app: database
  ports:
    - port: 3306
      targetPort: 3306
      protocol: TCP
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: pokemon-planning
  labels:
    app: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: spring-boot-backend
          # REPLACE: YOUR_DOCKERHUB_USERNAME with your actual Docker Hub username
          image: YOUR_DOCKERHUB_USERNAME/pokemon-planning-backend:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "kubernetes"
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:mariadb://database-service:3306/dev?useSSL=false"
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: database-secret
                  key: username
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-secret
                  key: password
            - name: SPRING_DATASOURCE_DRIVER_CLASS_NAME
              value: "org.mariadb.jdbc.Driver"
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          readinessProbe:
            httpGet:
              path: /api/health
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 90
            periodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: pokemon-planning
spec:
  selector:
    app: backend
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: backend-loadbalancer
  namespace: pokemon-planning
  annotations:
    service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "false"
spec:
  type: LoadBalancer
  selector:
    app: backend
  ports:
    - port: 8080
      targetPort: 8080

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: pokemon-planning
  labels:
    app: frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: vue-frontend
          # REPLACE: YOUR_DOCKERHUB_USERNAME with your actual Docker Hub username
          image: YOUR_DOCKERHUB_USERNAME/pokemon-planning-frontend:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
          env:
            - name: NODE_ENV
              value: "production"
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "250m"
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: 10

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: pokemon-planning
spec:
  selector:
    app: frontend
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-loadbalancer
  namespace: pokemon-planning
  annotations:
    service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "false"
spec:
  type: LoadBalancer
  selector:
    app: frontend
  ports:
    - port: 80
      targetPort: 3000

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: pokemon-planning
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-hpa
  namespace: pokemon-planning
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend
  minReplicas: 2
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70